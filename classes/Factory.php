<?php

namespace OFFLINE\Seeder\Classes;

abstract class Factory extends \Illuminate\Database\Eloquent\Factories\Factory
{
    /**
     * Get the factory name for the given model name.
     *
     * @param class-string<\Illuminate\Database\Eloquent\Model> $modelName
     *
     * @return class-string<\Illuminate\Database\Eloquent\Factories\Factory>
     */
    public static function resolveFactoryName(string $modelName, string $handle = '')
    {
        $parts = explode('\\', $modelName);
        $pluginNamespace = implode('\\', [$parts[0], $parts[1]]);

        $modelName = $parts[count($parts) - 1];

        // Use custom model factories for external models.
        if ($pluginNamespace === 'System\\Models' || $pluginNamespace === '\\RainLab\\User\\Models') {
            $pluginNamespace = 'OFFLINE\\Seeder';
        } elseif ($pluginNamespace === 'Tailor\\Models') {
            $pluginNamespace = 'App';
            $modelName = $handle;
        } elseif ($pluginNamespace === '\\Backend\\Models') {
            $pluginNamespace = 'OFFLINE\\Seeder';
            $modelName = 'BackendUser';
        }

        $factoryNamespace = $pluginNamespace . "\\Factories\\{$modelName}Factory";
        if (!class_exists($factoryNamespace)) {
            throw new \RuntimeException("[OFFLINE.Seeder] Cannot find factory class $factoryNamespace");
        }

        return $factoryNamespace;
    }

    /**
     * Get the name of the model that is generated by the factory.
     *
     * @return class-string<\Illuminate\Database\Eloquent\Model|TModel>
     */
    public function modelName()
    {
        $resolver = static::$modelNameResolver ?? function (self $factory) {
            $parts = explode('\\', $factory::class);
            $pluginNamespace = implode('\\', [$parts[0], $parts[1]]);
            $modelName = str_replace('Factory', '', $parts[count($parts) - 1]);

            $modelNamespace = $pluginNamespace . "\\Models\\$modelName";

            // Use custom models for the added factories.
            if ($factory::class === 'OFFLINE\\Seeder\\Factories\\FileFactory') {
                $modelNamespace = 'System\\Models\\File';
            }
            if ($factory::class === 'OFFLINE\\Seeder\\Factories\\UserFactory') {
                $modelNamespace = 'RainLab\\User\\Models\\User';
            }
            if ($factory::class === 'OFFLINE\\Seeder\\Factories\\BackendUserFactory') {
                $modelNamespace = 'Backend\\Models\\User';
            }
            if (starts_with($factory::class, 'App\\Factories')) {
                $modelNamespace = 'Tailor\\Models\\EntryRecord';
            }

            if (!class_exists($modelNamespace)) {
                throw new \RuntimeException("[OFFLINE.Seeder] Cannot find model class $modelNamespace");
            }

            return $modelNamespace;
        };

        return $this->model ?? $resolver($this);
    }

    /**
     * Get a new factory instance for the given model name.
     *
     * @param  class-string<\Illuminate\Database\Eloquent\Model>  $modelName
     * @return \Illuminate\Database\Eloquent\Factories\Factory
     */
    public static function factoryForModel(string $modelName, string $handle = '')
    {
        $factory = static::resolveFactoryName($modelName, $handle);

        return $factory::new();
    }
}
