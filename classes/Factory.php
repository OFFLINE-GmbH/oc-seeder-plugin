<?php

namespace OFFLINE\Seeder\Classes;

use Illuminate\Support\Str;

abstract class Factory extends \Illuminate\Database\Eloquent\Factories\Factory
{
    /**
     * Get the factory name for the given model name.
     *
     * @param class-string<\Illuminate\Database\Eloquent\Model> $modelName
     *
     * @return class-string<\Illuminate\Database\Eloquent\Factories\Factory>
     */
    public static function resolveFactoryName(string $modelName)
    {
        $parts = explode('\\', $modelName);
        $pluginNamespace = implode('\\', [$parts[0], $parts[1]]);

        $modelName = $parts[count($parts) - 1];

        // Use custom model factories for external models.
        if ($pluginNamespace === 'System\\Models' || $pluginNamespace === '\\RainLab\\User\\Models') {
            $pluginNamespace = 'OFFLINE\\Seeder';
        } elseif ($pluginNamespace === '\\Backend\\Models') {
            $pluginNamespace = 'OFFLINE\\Seeder';
            $modelName = 'BackendUser';
        }

        $factoryNamespace = $pluginNamespace . "\\Factories\\{$modelName}Factory";
        if (!class_exists($factoryNamespace)) {
            throw new \RuntimeException("[OFFLINE.Seeder] Cannot find factory class $factoryNamespace");
        }

        return $factoryNamespace;
    }

    /**
     * Get the name of the model that is generated by the factory.
     *
     * @return class-string<\Illuminate\Database\Eloquent\Model|TModel>
     */
    public function modelName()
    {
        $resolver = static::$modelNameResolver ?? function (self $factory) {
                $parts = explode('\\', $factory::class);
                $pluginNamespace = implode('\\', [$parts[0], $parts[1]]);
                $modelName = str_replace('Factory', '', $parts[count($parts) - 1]);

                $modelNamespace = $pluginNamespace . "\\Models\\$modelName";
                if (!class_exists($modelNamespace)) {
                    throw new \RuntimeException("[OFFLINE.Seeder] Cannot find model class $modelNamespace");
                }

                return $modelNamespace;
            };

        return $this->model ?? $resolver($this);
    }
}
